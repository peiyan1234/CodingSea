/*
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
*/



class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        unordered_map<int, int> nums_map;
        
        size_t x = 0;
        while (x < nums.size())
        {
            if (nums_map.find(target - nums[x]) != nums_map.end())
            {
                ans.push_back(x);
                ans.push_back(nums_map[target-nums[x]]);
                return ans;
            }
            nums_map[nums[x]] = x;
            ++x;
        }
        
    return {0};
    }
};



/*
Runtime: 12 ms, faster than 80.90% of C++ online submissions for Two Sum.
Memory Usage: 10.1 MB, less than 53.95% of C++ online submissions for Two Sum.
*/
