/*
Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.

Example 1:

Input: 121
Output: true
Example 2:

Input: -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
Follow up:

Coud you solve it without converting the integer to a string?
*/



class Solution {
public:
    bool isPalindrome(int x) {
        
        if (x > 2147486412 || x < 0)
            return false;
        
        int reverse_x = 0;
        short last_digit = 0;
        int y = x;
        while (true)
        {
            last_digit = x % 10;
            x = (x - last_digit) / 10;

            if (reverse_x == 214748364 && last_digit > 7)
                return false;
            if (reverse_x > 214748364)
                return false;
            
            reverse_x = reverse_x * 10 + last_digit;
            if (x == 0)
                break;
        }
        if (y == reverse_x)
            return true;
        
        return false;
    }
};


/*
Runtime: 8 ms, faster than 89.96% of C++ online submissions for Palindrome Number.
Memory Usage: 5.9 MB, less than 100.00% of C++ online submissions for Palindrome Number.*/
