/*
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [âˆ’231,  231 âˆ’ 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
*/



class Solution {
public:
    int reverse(int x) {
        
        bool neg_flag = false;

        if (x == -2147483648 || x > 2147486412 || x < -2147486412)
            return 0;
        if (x < 0)
        {
            neg_flag = true;
            x = -x;
        }
        
        int ans = 0;
        int last_digit = 0;
        while (x != 0)
        {
            last_digit = x % 10;     
            x = (x - last_digit) / 10;
            
            if (neg_flag == true && (ans == 214748364 && last_digit > 8))
                return 0;
            if (neg_flag == false && (ans == 214748364 && last_digit > 7))
                return 0;
            
            if (ans > 214748364)
                return 0;
            
            ans = ans * 10 + last_digit;   

        }
        
        if (neg_flag)
            ans = -ans;
        return ans;
    }
};


/*
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Reverse Integer.
Memory Usage: 6.1 MB, less than 100.00% of C++ online submissions for Reverse Integer.
*/
